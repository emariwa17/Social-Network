#social networking bfs algorithm
from collections import deque

TheGraph = {}
TheQueries = []

def acceptedValues():

   
    vertex_edge = [int(i) for  i in input().strip().split(" ")]

   
    for i in range(vertex_edge[1]):
        edge = [int(i) for i in input().strip().split(" ")]
        try:
            TheGraph[edge[0]].append(edge[1])
        except:
            TheGraph[edge[0]] = [edge[1]]
        try:
            TheGraph[edge[1]].append(edge[0])
        except:
            TheGraph[edge[1]] = [edge[0]]

    no_of_queries = int(input())

    for i in range(no_of_queries):
        TheQueries.append([int(i) for i in input().strip().split(" ")])
  
    for query in TheQueries:
        bfs(query)

def bfs(query):
    counter = 0
    q = deque()
    q.append(query[0])
    visited = {query[0] : True}
    distance = {query[0] : 0}

    while q:
        popped = q.popleft()
        for neighbour in TheGraph[popped]:
            if neighbour not in visited:
                visited[neighbour] = True
               
                if distance[popped] + 1 > query[1]:
                    for key in distance:
                        if distance[key] == query[1]:
                          counter +=1
                    print(counter)
                    return
              
                else:
                    distance[neighbour] = distance[popped] + 1
                    q.append(neighbour)


    print(counter)

acceptedValues()
